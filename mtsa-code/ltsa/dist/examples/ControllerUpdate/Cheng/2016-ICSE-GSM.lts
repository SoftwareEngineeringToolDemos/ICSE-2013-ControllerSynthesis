// -----------------------------COMMENTS-------------------------------

// - To execute the solution for update controllers select in the dropdown menu 
// the "UPDATE_CONTROLLER" label, and then press the compose button (||).
// - In the section of UPDATING CONTROLLER SPEC, in this file, you can spec
// different transition requeriments presented in the paper.
// - You can animate the controller obtained pressing the blue A in the top bar

// ---------------------------ENVIRONMENTS-----------------------------

set OldPositions = {x, y}
set NewPositions = {x, y, z}
set OldControllableActions = {shift[OldPositions], encode, send, receive, buffer[1..2], output}
set NewControllableActions = {shift[NewPositions], encode, send, receive, buffer[1..3], output}
set Alphabet = {shift[NewPositions], encode, send, receive, buffer[1..3], output}
set UpdatingControllableActions = {NewControllableActions}

OLD_ENV = SOURCE,
SOURCE = (shift['x] -> DATA_X),
DATA_X = (shift['y] -> DATA_Y | encode -> SENDER),
DATA_Y = (encode -> SENDER),
SENDER = (send -> RECEIVER),
RECEIVER = (receive -> buffer[1..2] -> output -> SOURCE).


NEW_ENV = SOURCE,
SOURCE = (shift['x] -> DATA_X),
DATA_X = (shift['y] -> DATA_Y | encode -> SENDER),
DATA_Y = (shift['z] -> DATA_Z | encode -> SENDER),
DATA_Z = (encode -> SENDER),
SENDER = (send -> RECEIVER),
RECEIVER = (receive -> buffer[1..3] -> output -> SOURCE).

||OldEnvironment = (OLD_ENV).
||NewEnvironment = (NEW_ENV).

//Fluents declaration
fluent ReadX = <shift['x],output>
fluent ReadY = <shift['y],output>
fluent ReadZ = <shift['z],output>

// ---------------------------OLD CONTROLLER SPEC (at most 2 packet loss)-----------------------------

assert OLD_BUFFER_POLICY = (((ReadX && !ReadY) -> !buffer[2]) && (ReadY -> !buffer[1]) )

ltl_property P_OLD_BUFFER_POLICY = []OLD_BUFFER_POLICY

controllerSpec OldSpec = {
    safety = {P_OLD_BUFFER_POLICY}
    controllable = {OldControllableActions}
}

controller ||OldController = OldEnvironment~{OldSpec}.
||OldEnvironmentController = (OldController || OldEnvironment).

// ---------------------------NEW CONTROLLER SPEC (at most 3 packet loss)-----------------------------

assert NEW_BUFFER_POLICY = (((ReadX && !ReadY) -> !buffer[2..3]) && (ReadY && !ReadZ -> (!buffer[1] && !buffer[3])) &&
								(ReadZ -> !buffer[1..2]) )

ltl_property P_NEW_BUFFER_POLICY = []NEW_BUFFER_POLICY

controllerSpec NewSpec = {
    safety = {P_NEW_BUFFER_POLICY}
    controllable = {NewControllableActions}
}

controller ||NewController = NewEnvironment~{NewSpec}.
||NewEnvironmentController = (NewController || NewEnvironment).

// ---------------------------UPDATING CONTROLLER SPEC-----------------------------

//Fluents for updates
fluent EncodeDone = <encode,output>
fluent SendDone = <send,output>
fluent ReceiveDone = <receive,output>
fluent BufferedX = <buffer[1],output>
fluent BufferedY = <buffer[2],output>
fluent OutputDone = <output,shift['x]>
fluent AlreadyBuffered = <buffer[1..3],output>

fluent StopOldSpec = <stopOldSpec, beginUpdate>
fluent StartNewSpec = <startNewSpec, beginUpdate>
fluent AnyActionUntilStartNew = <Alphabet,startNewSpec>

assert AnyAction = (shift[NewPositions] || encode || send || receive || buffer[1..3] || output)


ltl_property T_NO_TP = []((StopOldSpec || StartNewSpec) -> (!AnyAction W (StopOldSpec && StartNewSpec))  )
ltl_property T_OVERLAP = [](stopOldSpec -> (StartNewSpec && AnyActionUntilStartNew))
 

updatingController UpdCont = { 
    oldController = OldEnvironmentController,
    oldEnvironment = OldEnvironment,
    newEnvironment = NewEnvironment,
    oldGoal = OldSpec,
    newGoal = NewSpec,
//    transition = T_NO_TP,
	transition = T_OVERLAP,
    nonblocking,
    updateFluents = {
        {EncodeDone, EncodeDone},
        {SendDone, SendDone},
        {ReceiveDone, ReceiveDone},
        {ReadX, ReadX},
        {ReadY, ReadY},
		{BufferedX,BufferedX},
		{BufferedY,BufferedY}
    }
}

// ---------------------------TEST AND RESULTS-----------------------------

assert S_OLD = (OLD_BUFFER_POLICY)
assert S_NEW = (NEW_BUFFER_POLICY)


assert TEST_FORMULA1 = (S_OLD W stopOldSpec)
assert TEST_FORMULA2 = [](startNewSpec -> []S_NEW)
assert TEST_FORMULA3 = [](stopOldSpec -> X(!stopOldSpec))
assert TEST_FINAL_FORMULA = ((S_OLD W stopOldSpec) && [](startNewSpec -> []S_NEW) && [](stopOldSpec -> X(!stopOldSpec)))

||UPDATE_CONTROLLER = UpdCont.

